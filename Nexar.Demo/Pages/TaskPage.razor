@page "/Task"
@inherits AbstractPage
@using Data = TaskItem

<ItemPageHeader Text="Task" Item=@Data.Current />

@if (Data.Current is null)
{
    return;
}

<TextFieldCopy Label="Id" Text=@Data.Current.Tag.Id />

<TextField Label="Name" Text=@Data.Current.Tag.Name />

<TextField Label="RefId" Text=@Data.Current.Tag.RefId />

<TextField Label="Priority" Text=@Data.Current.Tag.Priority.ToString() />

<TextField Label="Status" Text=@Data.Current.Tag.Status.ToString() />

<TextFieldText Label="Description" Text=@Data.Current.Tag.Description />

<TextFieldAvatar Label="Assignee (Email / UserId)"
                 Url=@Data.Current.Tag.Assignee.PictureUrl
                 Text=@(Data.Current.Tag.Assignee.Email + " / " + Data.Current.Tag.Assignee.UserId) />

<TextFieldAvatar Label="CreatedBy (Email / UserId)"
                 Url=@Data.Current.Tag.CreatedBy.PictureUrl
                 Text=@(Data.Current.Tag.CreatedBy.Email + " / " + Data.Current.Tag.CreatedBy.UserId) />

<TextField Label="CreatedAt" Text=@Data.Current.Tag.CreatedAt.ToString() />

<TextField Label="ModifiedAt" Text="@Data.Current.Tag.ModifiedAt.ToString()" />

@if (Data.Current.IsUpdating)
{
    <MudProgressLinear Indeterminate=true />
    return;
}

@if (Data.Current.Comments?.Count > 0)
{
    <br />
    <MudText Typo=Typo.h5>Comments</MudText>

    foreach (var comment in Data.Current.Comments)
    {
        <CardComment Comment=@comment />
    }
}

<br />
<AlertGraphQL Files="Tasks.graphql Comments.Task.graphql Comments.Common.graphql" />

@code {
    protected override void OnInitialized()
    {
        Data.OnChange += StateHasChanged;
    }

    protected override void Disposing()
    {
        Data.OnChange -= StateHasChanged;
    }
}
