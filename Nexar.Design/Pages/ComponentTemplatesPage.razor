@page "/component-templates"
@inherits AbstractPage

@if (ComponentTemplatesItem.Current is not null)
{
    <ItemPageHeader Text="Component Templates" Item=@ComponentTemplatesItem.Current />

    @if (ComponentTemplatesItem.Current.Templates is null)
    {
        <MudProgressCircular Indeterminate=true />
    }
    else
    {
        <MudTable Items=@ComponentTemplatesItem.Current.Templates Filter="FilterElement" Dense=true>
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="_filterString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="width:1%"></MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Folder</MudTh>
                <MudTh>Description</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudButtonGroup>
                        <MudIconButton Icon=@Icons.Material.Outlined.Download
                               Target="_blank"
                               Title="Download the latest revision"
                               Href=@context.LatestRevision.DownloadableFile.DownloadUrl />
                        <MudIconButton Icon=@Icons.Material.Filled.ContentCopy
                               Title="Copy template node ID"
                               OnClick=@(() => JS.InvokeVoidAsyncWithErrorHandling("navigator.clipboard.writeText", context.Id)) />
                    </MudButtonGroup>
                </MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Value">@context.Folder.Name</MudTd>
                <MudTd DataLabel="Value">@context.Description</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code {
    string _filterString = string.Empty;

    protected override void OnInitialized()
    {
        ComponentTemplatesItem.OnChange += StateHasChanged;
    }

    protected override void Disposing()
    {
        ComponentTemplatesItem.OnChange -= StateHasChanged;
    }

    bool FilterElement(Nexar.Client.IMyComponentTemplate element)
    {
        return
            string.IsNullOrWhiteSpace(_filterString) ||
            element.Name.Contains(_filterString, StringComparison.OrdinalIgnoreCase) ||
            element.Description.Contains(_filterString, StringComparison.OrdinalIgnoreCase);
    }
}
