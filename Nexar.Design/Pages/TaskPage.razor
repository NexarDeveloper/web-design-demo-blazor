@page "/task"
@inherits AbstractPage
@implements IDisposable

@if (TaskItem.Current != null)
{
    <ItemPageHeader Text="Task" Item=@TaskItem.Current />

    <TextFieldCopy Label="Id" Text=@TaskItem.Current.Tag.Id />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="Name" Text=@TaskItem.Current.Tag.Name />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="RefId" Text=@TaskItem.Current.Tag.RefId />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="Priority" Text=@TaskItem.Current.Tag.Priority.ToString() />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="Status" Text=@TaskItem.Current.Tag.Status.ToString() />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="Description" Text=@TaskItem.Current.Tag.Description Lines=@CountLines(TaskItem.Current.Tag.Description) />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="CreatedAt" Text=@TaskItem.Current.Tag.CreatedAt.ToString() />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="ModifiedAt" Text="@TaskItem.Current.Tag.ModifiedAt.ToString()" />

    <MudTextField T=string ReadOnly=true Variant=Variant.Outlined
              Label="Assignee (UserId / Email)" Text=@(TaskItem.Current.Tag.Assignee.UserId + " / " + TaskItem.Current.Tag.Assignee.Email) />

    @if (TaskItem.Current.Comments?.Count > 0)
    {
        <MudText Typo="Typo.h4">Comments</MudText>

        foreach (var comment in TaskItem.Current.Comments)
        {
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudText Typo=Typo.body2><b>CommentId:</b> @comment.CommentId</MudText>
                    <MudTextField T=string ReadOnly=true Text=@comment.Text Lines=@(CountLines(comment.Text)) />
                </MudCardContent>
            </MudCard>
        }
    }
}

@code {
    protected override void OnInitialized()
    {
        TaskItem.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        TaskItem.OnChange -= StateHasChanged;
    }
}
